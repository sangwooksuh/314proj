{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AirBnB Scraping Analysis Welcome to Kevin and Sangwook's AirBnb Scraping Analysis tool! Here you will have access scraping raw AirBnB listings in whatever cities or countries you want, have them properly cleaned (with bonus columns!), and have visualizing tools to help you with your analysis. Commands get_cities() - Prints list of scrapable cities get_countries() - Prints list of scrapable countries clean(df) - Cleans raw dataframe, adds additional informational columns scatter(df, feature1, feature2) - Plots scatterplot between two features in the data prices_violin_plot(df) - Plots violinplot to visualize price distributions of listings predict_price(df, feature, feature_val) - Predicts price given what feature to predict with, as well as its value site_name: AirBnB Scraping Analysis","title":"AirBnB Scraping Analysis"},{"location":"#airbnb-scraping-analysis","text":"Welcome to Kevin and Sangwook's AirBnb Scraping Analysis tool! Here you will have access scraping raw AirBnB listings in whatever cities or countries you want, have them properly cleaned (with bonus columns!), and have visualizing tools to help you with your analysis.","title":"AirBnB Scraping Analysis"},{"location":"#commands","text":"get_cities() - Prints list of scrapable cities get_countries() - Prints list of scrapable countries clean(df) - Cleans raw dataframe, adds additional informational columns scatter(df, feature1, feature2) - Plots scatterplot between two features in the data prices_violin_plot(df) - Plots violinplot to visualize price distributions of listings predict_price(df, feature, feature_val) - Predicts price given what feature to predict with, as well as its value site_name: AirBnB Scraping Analysis","title":"Commands"},{"location":"Cleaning/","text":"Cleaning To properly utilize this module, you will want to have already scraped your data and have the raw dataframe. Once you have your dataframe, simply call clean(df), which returns your dataframe neatly cleaned. What clean(df) specifically does: Drop redundant/unnecessary columns Clean html tags from columns with descriptions Set date columns to datetime type Produce \"num_verfications\" and \"num_amenities\" columns Clean and casting the \"price\" column to float Set the true/false columns to boolean type Imputate missing scores Produce wordcount columns Encoded \"host_response_time\" Turn rates into actual percentages Drop remaining missing values","title":"Cleaning"},{"location":"Cleaning/#cleaning","text":"To properly utilize this module, you will want to have already scraped your data and have the raw dataframe. Once you have your dataframe, simply call clean(df), which returns your dataframe neatly cleaned.","title":"Cleaning"},{"location":"Cleaning/#what-cleandf-specifically-does","text":"Drop redundant/unnecessary columns Clean html tags from columns with descriptions Set date columns to datetime type Produce \"num_verfications\" and \"num_amenities\" columns Clean and casting the \"price\" column to float Set the true/false columns to boolean type Imputate missing scores Produce wordcount columns Encoded \"host_response_time\" Turn rates into actual percentages Drop remaining missing values","title":"What clean(df) specifically does:"},{"location":"Scraping/","text":"Scraping In this module, available cities and countries to scrape can be found, and then their data can actually be scraped. All the data is scraped from http://insideairbnb.com/get-the-data 1. get_cities() and get_countries() These two functions operate essentially in the same way: they both print a list of scrapable places. get_cities() prints a list of all available cities that can be scraped get_countries() prints a list of all available counties that can be scraped 2. get_city_data(city) and get_country_data(country) These two functions also operate very similarly, both returning a freshly-scraped dataframe from the specified place (must be a String) get_city_data(city) returns a scraped dataframe containing all the AirBnB listings in that city Example: get_city_data(\"amsterdam\") get_country_data(country) returns a scraped dataframe containing all the AirBnB listings in that country Example: get_country_data(\"greece\")","title":"Scraping"},{"location":"Scraping/#scraping","text":"In this module, available cities and countries to scrape can be found, and then their data can actually be scraped. All the data is scraped from http://insideairbnb.com/get-the-data","title":"Scraping"},{"location":"Scraping/#1-get_cities-and-get_countries","text":"These two functions operate essentially in the same way: they both print a list of scrapable places. get_cities() prints a list of all available cities that can be scraped get_countries() prints a list of all available counties that can be scraped","title":"1. get_cities() and get_countries()"},{"location":"Scraping/#2-get_city_datacity-and-get_country_datacountry","text":"These two functions also operate very similarly, both returning a freshly-scraped dataframe from the specified place (must be a String) get_city_data(city) returns a scraped dataframe containing all the AirBnB listings in that city Example: get_city_data(\"amsterdam\") get_country_data(country) returns a scraped dataframe containing all the AirBnB listings in that country Example: get_country_data(\"greece\")","title":"2. get_city_data(city) and get_country_data(country)"},{"location":"Visualizing/","text":"Visualizing To properly utilize this module, you will want to have already cleaned your dataframe. 1. scatter(df, feature1, feature2) Takes a dataframe, and 2 of its columns/features, and plots a scatterplot between the two variables. input description df DataFrame - Cleaned dataframe you want to scatter the data from feature1 String - column name of feature you want to scatter, x-axis feature2 String - other column name of feature you want to scatter, y-axis Example: scatter(italy_df, \"num_amenities\", \"price\") 2. prices_violin_plot(df) Takes a dataframe, generates a violinplot to visualize the distribution of nightly prices input description df DataFrame - Cleaned dataframe you want visualize the price with Example: prices_violin_plot(italy_df) 3. predict_price(df, feature, feature_val) Takes a dataframe, a feature to predict the price with, and the value of that feature. input description df DataFrame - Cleaned dataframe you want to scatter the data from feature String - column name of feature you want to train Linear Regression model with val int/float - value of feature that you want the price to be predicted for Example: predict_price(italy_df, \"description_wordcount\", 200)","title":"Visualizing"},{"location":"Visualizing/#visualizing","text":"To properly utilize this module, you will want to have already cleaned your dataframe.","title":"Visualizing"},{"location":"Visualizing/#1-scatterdf-feature1-feature2","text":"Takes a dataframe, and 2 of its columns/features, and plots a scatterplot between the two variables. input description df DataFrame - Cleaned dataframe you want to scatter the data from feature1 String - column name of feature you want to scatter, x-axis feature2 String - other column name of feature you want to scatter, y-axis Example: scatter(italy_df, \"num_amenities\", \"price\")","title":"1. scatter(df, feature1, feature2)"},{"location":"Visualizing/#2-prices_violin_plotdf","text":"Takes a dataframe, generates a violinplot to visualize the distribution of nightly prices input description df DataFrame - Cleaned dataframe you want visualize the price with Example: prices_violin_plot(italy_df)","title":"2. prices_violin_plot(df)"},{"location":"Visualizing/#3-predict_pricedf-feature-feature_val","text":"Takes a dataframe, a feature to predict the price with, and the value of that feature. input description df DataFrame - Cleaned dataframe you want to scatter the data from feature String - column name of feature you want to train Linear Regression model with val int/float - value of feature that you want the price to be predicted for Example: predict_price(italy_df, \"description_wordcount\", 200)","title":"3. predict_price(df, feature, feature_val)"}]}